{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Introduction The main objective of this project is to detect the absence or presence of facemask using the OAK-D camera feed of turtlebot by deploying Neural Networks. If the turtlebot camera detects a face without mask, it'll move towards the detected face. a. Updates/Refreshes We made our own Neural Network for the feature generation by taking current_frames from OAK-D camera. From the custom NN model, We deployed model_weights to ROS node which does face mask recognition in real time by subscribing to real time data current_frame. We used inbuilt software called MTCNN face detection algorithm for creation of the bounding box for faces which is also subscribing to real time data current_frame. If the custom model is detecting face without maask, it publishes velocity to move towards that face by using Velocity subscriber Node. b. Project Process mkdocs new [dir-name] - Create a new project. mkdocs serve - Start the live-reloading docs server. mkdocs build - Build the documentation site. mkdocs -h - Print help message and exit. c. Work Flow Initially we collected dataset consisting of huge variations i.e Face with mask and Without Mask at different distances from OAK-D camera at different backgrounds with multiple gestures being performed. Few Instances of preliminary dataset With Face Mask - If the frame has frame consisting of face with mask Without Face Mask - If the frame has consisting of face without mask and some ambiguity cases of half frames and fully blurred faces. No recognizable face in Frame - If the frame has no recognizable face and some distant images which are very unclear. Then with the custom Neural Network we devloped, we generated feature maps which shows as following: Even in this zoomed in images, the amount of pixels covering pixels are very few and very difficult to classify the images based on mask from the limited data with high number of variations. Although training Acuuracy is good by optimizing the algorithm and increasing number of epochs, testing accuracy is not good with only 65% . If we perform real time detection with this, it would be highly inaccurate. We updated the Training data with Face with and without mask at limited distance at proper light source with few gestures. Few Instances of preliminary dataset With Face Mask - If the frame has frame consisting of face with mask Without Face Mask - If the frame has consisting of face without mask and some ambiguity cases of half frames and fully blurred faces. No recognizable face in Frame - If the frame has no recognizable face and some distant images which are very unclear. After Training on data, we got adequate accuracy in Training along with a good amount of testing accuracy of 89% we split the data into Training and Testing in 90% and 10% and Training accuracy as follows: Training data Classification: Testing data Classification: Training Accuracy: d. ROS Network e. Tradeoffs Main Challenges 1. Training time 2. Accurate prediction of frames during Real time streaming f. Videos of Working Model RealTime detection of Presence or Ansence of mask with absolute zero training of Person's face f. Goals, Process and Results Project layout mkdocs.yml # The configuration file. docs/ index.md # The documentation homepage. ... # Other markdown pages, images and other files.","title":"Home"},{"location":"#introduction","text":"The main objective of this project is to detect the absence or presence of facemask using the OAK-D camera feed of turtlebot by deploying Neural Networks. If the turtlebot camera detects a face without mask, it'll move towards the detected face.","title":"Introduction"},{"location":"#a-updatesrefreshes","text":"We made our own Neural Network for the feature generation by taking current_frames from OAK-D camera. From the custom NN model, We deployed model_weights to ROS node which does face mask recognition in real time by subscribing to real time data current_frame. We used inbuilt software called MTCNN face detection algorithm for creation of the bounding box for faces which is also subscribing to real time data current_frame. If the custom model is detecting face without maask, it publishes velocity to move towards that face by using Velocity subscriber Node.","title":"a. Updates/Refreshes"},{"location":"#b-project-process","text":"mkdocs new [dir-name] - Create a new project. mkdocs serve - Start the live-reloading docs server. mkdocs build - Build the documentation site. mkdocs -h - Print help message and exit.","title":"b. Project Process"},{"location":"#c-work-flow","text":"Initially we collected dataset consisting of huge variations i.e Face with mask and Without Mask at different distances from OAK-D camera at different backgrounds with multiple gestures being performed. Few Instances of preliminary dataset With Face Mask - If the frame has frame consisting of face with mask Without Face Mask - If the frame has consisting of face without mask and some ambiguity cases of half frames and fully blurred faces. No recognizable face in Frame - If the frame has no recognizable face and some distant images which are very unclear. Then with the custom Neural Network we devloped, we generated feature maps which shows as following: Even in this zoomed in images, the amount of pixels covering pixels are very few and very difficult to classify the images based on mask from the limited data with high number of variations. Although training Acuuracy is good by optimizing the algorithm and increasing number of epochs, testing accuracy is not good with only 65% . If we perform real time detection with this, it would be highly inaccurate. We updated the Training data with Face with and without mask at limited distance at proper light source with few gestures. Few Instances of preliminary dataset With Face Mask - If the frame has frame consisting of face with mask Without Face Mask - If the frame has consisting of face without mask and some ambiguity cases of half frames and fully blurred faces. No recognizable face in Frame - If the frame has no recognizable face and some distant images which are very unclear. After Training on data, we got adequate accuracy in Training along with a good amount of testing accuracy of 89% we split the data into Training and Testing in 90% and 10% and Training accuracy as follows: Training data Classification: Testing data Classification: Training Accuracy:","title":"c. Work Flow"},{"location":"#d-ros-network","text":"","title":"d. ROS Network"},{"location":"#e-tradeoffs","text":"Main Challenges 1. Training time 2. Accurate prediction of frames during Real time streaming","title":"e. Tradeoffs"},{"location":"#f-videos-of-working-model","text":"RealTime detection of Presence or Ansence of mask with absolute zero training of Person's face","title":"f. Videos of Working Model"},{"location":"#f-goals-process-and-results","text":"","title":"f. Goals, Process and Results"},{"location":"#project-layout","text":"mkdocs.yml # The configuration file. docs/ index.md # The documentation homepage. ... # Other markdown pages, images and other files.","title":"Project layout"},{"location":"Neural_Network_Model/","text":"Introduction The main objective of this project is to detect the absence or presence of facemask using the OAK-D camera feed of turtlebot by deploying Neural Networks. If the turtlebot camera detects a face without mask, it'll move towards the detected face. Neural Network for Face Mask Detection Model Requirements # The Neural Network for Face detection. # Code import pandas as pd import tensorflow as tf from tensorflow.keras.preprocessing.image import ImageDataGenerator from tensorflow.keras.models import Sequential from tensorflow.keras.layers import Conv2D, MaxPooling2D, Flatten, Dense from matplotlib import pyplot as plt import numpy as np Training data #Step 1 Data train_df = pd.read_csv(r'D:\\Spring 23\\EGR 598\\project\\Data6.csv') train_df['label'] = train_df['label'].astype(str) train_datagen = ImageDataGenerator(rescale=1./255) test_datagen = ImageDataGenerator(rescale=1./255) train_generator = train_datagen.flow_from_dataframe( dataframe=train_df, directory=r'D:\\Spring 23\\EGR 598\\project\\train_images\\train_data6', x_col='filename', y_col='label', target_size=(300, 300), batch_size=32, class_mode='sparse', shuffle=True) Model Building # Step 2: Build and compile the model model = Sequential([ Conv2D(32, (3, 3), activation='relu', input_shape=(300, 300, 3)), MaxPooling2D((2, 2)), Conv2D(64, (3, 3), activation='relu'), MaxPooling2D((2, 2)), Conv2D(128, (3, 3), activation='relu'), MaxPooling2D((2, 2)), # till here better accuracy Flatten(), Dense(64, activation='relu'), Dense(3, activation='softmax') ]) history =model.compile(optimizer='adam',loss='sparse_categorical_crossentropy',metrics=['accuracy']) acc_list = [] Training the Model # Step 3: Train the model history =model.fit(train_generator, epochs=5) for acc in history.history['accuracy']: acc_list.append(acc) weights = model.get_weights() Saving the Model Weights and Model # Step 4: saving model model.save_weights('my_model_weights.h5') model.save('mode_for_inference.h5')","title":"Neural Network Model"},{"location":"Neural_Network_Model/#introduction","text":"The main objective of this project is to detect the absence or presence of facemask using the OAK-D camera feed of turtlebot by deploying Neural Networks. If the turtlebot camera detects a face without mask, it'll move towards the detected face.","title":"Introduction"},{"location":"Neural_Network_Model/#neural-network-for-face-mask-detection-model","text":"","title":"Neural Network for Face Mask Detection Model"},{"location":"Neural_Network_Model/#requirements","text":"# The Neural Network for Face detection. # Code import pandas as pd import tensorflow as tf from tensorflow.keras.preprocessing.image import ImageDataGenerator from tensorflow.keras.models import Sequential from tensorflow.keras.layers import Conv2D, MaxPooling2D, Flatten, Dense from matplotlib import pyplot as plt import numpy as np","title":"Requirements"},{"location":"Neural_Network_Model/#training-data","text":"#Step 1 Data train_df = pd.read_csv(r'D:\\Spring 23\\EGR 598\\project\\Data6.csv') train_df['label'] = train_df['label'].astype(str) train_datagen = ImageDataGenerator(rescale=1./255) test_datagen = ImageDataGenerator(rescale=1./255) train_generator = train_datagen.flow_from_dataframe( dataframe=train_df, directory=r'D:\\Spring 23\\EGR 598\\project\\train_images\\train_data6', x_col='filename', y_col='label', target_size=(300, 300), batch_size=32, class_mode='sparse', shuffle=True)","title":"Training data"},{"location":"Neural_Network_Model/#model-building","text":"# Step 2: Build and compile the model model = Sequential([ Conv2D(32, (3, 3), activation='relu', input_shape=(300, 300, 3)), MaxPooling2D((2, 2)), Conv2D(64, (3, 3), activation='relu'), MaxPooling2D((2, 2)), Conv2D(128, (3, 3), activation='relu'), MaxPooling2D((2, 2)), # till here better accuracy Flatten(), Dense(64, activation='relu'), Dense(3, activation='softmax') ]) history =model.compile(optimizer='adam',loss='sparse_categorical_crossentropy',metrics=['accuracy']) acc_list = []","title":"Model Building"},{"location":"Neural_Network_Model/#training-the-model","text":"# Step 3: Train the model history =model.fit(train_generator, epochs=5) for acc in history.history['accuracy']: acc_list.append(acc) weights = model.get_weights()","title":"Training the Model"},{"location":"Neural_Network_Model/#saving-the-model-weights-and-model","text":"# Step 4: saving model model.save_weights('my_model_weights.h5') model.save('mode_for_inference.h5')","title":"Saving the Model Weights and Model"},{"location":"about/","text":"Ad quem nec numquam esset aderant lyncum First Step of Project Lorem markdownum trahuntur rear Cocinthia novem euntem ardet inmissusque scylla haurite concussaque miles, nec nymphis tenetur, mortisque . Indoluisse tollebat temerat mulcebat, unde ita corporibus tenebat talia Palladias verba obstipui ? Sua dum Atridae aestu abdiderat Cura annosae Obprobrium ille colorem silet mota atque Dryope Canae sum clam praecordia parenti Perdant dicta dum si sinat vaga cerva Achivos pressit Qui saxo, vivere dedere utile introrsus in gladios foedera licet, vocis acta. Poma vanam, peteret e sonabat, siqua pater! Quid procul dixit; et moriens exanimis ad pluma avenis coluntur. Possum pars et effudit marmore, fuit, timorem tegit, sunt Adonis sagittifera superare perque in natae. Quoque pavonibus mersis Omnia cum comas tempore remoretur Sidonide magni Quid responderat ilice crimine Moenibus Latia Veste adhuc iram volucrum inde non incandescit Pumice quodsi. Tui illa diu solet nubibus? Monitusque Argosque fugisse Phaethontida quotiens sua rigorem animalia . Ibat ferre pluma scelerata Phoebo e totidem agitur et retenta , caput! Res adit dura et subiecit te opacas plumbum perpetuo pondus ad habeto pluviaque. Dedit vocatus vel crudelem boves retentis stultos Siquis tu venit nimbosi signaque videbitur virgine terrigenae per; in regna nec orbe fameque deus, propiore possent. Narrat novas pariente me ultima videri, palus , Indigetes semianimesque fiunt corpora saxa. Scopulus induruit cornua. Vestaque quis aut facitis actis et unam Ensis plumas auctor ave fugit agitataque videnda Iactari vidi quoque Et iaculum chlamydem habenis quod dixit , lenta medio in tereti Celmi digna, nec? Secuta versa. Suumque quotiens siqua quisquam pronos inimica, motaeque in potum. Manu palluit iamque; per per, monstrum habuit ad draconum et illa lactente inposita. Caput et tenens iuvenalis et Italico notam sparsit reddite os riget ingeniumque et muneris primum nec.","title":"About"},{"location":"about/#ad-quem-nec-numquam-esset-aderant-lyncum","text":"","title":"Ad quem nec numquam esset aderant lyncum"},{"location":"about/#first-step-of-project","text":"Lorem markdownum trahuntur rear Cocinthia novem euntem ardet inmissusque scylla haurite concussaque miles, nec nymphis tenetur, mortisque . Indoluisse tollebat temerat mulcebat, unde ita corporibus tenebat talia Palladias verba obstipui ? Sua dum Atridae aestu abdiderat Cura annosae Obprobrium ille colorem silet mota atque Dryope Canae sum clam praecordia parenti Perdant dicta dum si sinat vaga cerva","title":"First Step of Project"},{"location":"about/#achivos-pressit","text":"Qui saxo, vivere dedere utile introrsus in gladios foedera licet, vocis acta. Poma vanam, peteret e sonabat, siqua pater! Quid procul dixit; et moriens exanimis ad pluma avenis coluntur. Possum pars et effudit marmore, fuit, timorem tegit, sunt Adonis sagittifera superare perque in natae. Quoque pavonibus mersis Omnia cum comas tempore remoretur Sidonide magni Quid responderat ilice crimine Moenibus Latia","title":"Achivos pressit"},{"location":"about/#veste-adhuc-iram-volucrum-inde-non-incandescit","text":"Pumice quodsi. Tui illa diu solet nubibus? Monitusque Argosque fugisse Phaethontida quotiens sua rigorem animalia . Ibat ferre pluma scelerata Phoebo e totidem agitur et retenta , caput! Res adit dura et subiecit te opacas plumbum perpetuo pondus ad habeto pluviaque.","title":"Veste adhuc iram volucrum inde non incandescit"},{"location":"about/#dedit-vocatus-vel-crudelem-boves-retentis-stultos","text":"Siquis tu venit nimbosi signaque videbitur virgine terrigenae per; in regna nec orbe fameque deus, propiore possent. Narrat novas pariente me ultima videri, palus , Indigetes semianimesque fiunt corpora saxa. Scopulus induruit cornua. Vestaque quis aut facitis actis et unam Ensis plumas auctor ave fugit agitataque videnda Iactari vidi quoque Et iaculum chlamydem habenis quod dixit , lenta medio in tereti Celmi digna, nec? Secuta versa. Suumque quotiens siqua quisquam pronos inimica, motaeque in potum. Manu palluit iamque; per per, monstrum habuit ad draconum et illa lactente inposita. Caput et tenens iuvenalis et Italico notam sparsit reddite os riget ingeniumque et muneris primum nec.","title":"Dedit vocatus vel crudelem boves retentis stultos"}]}